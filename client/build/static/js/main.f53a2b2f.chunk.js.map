{"version":3,"sources":["utils/getWeb3.js","components/cars.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","Object","asyncToGenerator","regenerator_default","a","mark","_callee","web3","_web","provider","_web2","wrap","_context","prev","next","ethereum","Web3","enable","t0","console","log","providers","HttpProvider","stop","this","cars","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","componentDidMount","accounts","Contract","instance","sent","eth","getAccounts","truffleContract","AdoptionContract","setProvider","currentProvider","deployed","setState","contract","markAdopted","alert","_callee2","_this$state","adopters","i","_context2","state","getAdopters","length","handleAdopt","_ref3","_callee3","event","_this$state2","carId","_context3","preventDefault","parseInt","target","data","adopt","from","_x","apply","arguments","bind","assertThisInitialized","_this2","fetch","then","response","json","bindEvents","_this3","react_default","createElement","class","className","map","car","campaign","year","src","picture","alt","name","seats","price","transmission","type","data-id","id","onClick","Component","App","src_components_cars","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f53a2b2f.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Acccounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:7545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { Component } from \"react\";\nimport AdoptionContract from \"../contracts/Adoption.json\";\nimport getWeb3 from \"../utils/getWeb3\";\nimport truffleContract from \"truffle-contract\";\n\nimport \"./cars.css\";\n\nclass cars extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            cars: [],\n            web3: null,\n            accounts: null,\n            contract: null\n        };\n\n        this.handleAdopt = this.handleAdopt.bind(this);\n    }\n\n    componentDidMount = async () => {\n        try {\n            // Get network provider and web3 instance.\n            const web3 = await getWeb3();\n\n            // Use web3 to get the user's accounts.\n            const accounts = await web3.eth.getAccounts();\n\n            // Get the contract instance.\n            const Contract = truffleContract(AdoptionContract);\n            Contract.setProvider(web3.currentProvider);\n            const instance = await Contract.deployed();\n\n            // Set web3, accounts, and contract to the state, and then proceed with an\n            // example of interacting with the contract's methods.\n            this.setState({ web3, accounts, contract: instance }, this.markAdopted);\n\n        } catch (error) {\n            // Catch any errors for any of the above operations.\n            alert(\n                `Failed to load web3, accounts, or contract. Check console for details.`\n            );\n            console.log(error);\n        }\n    };\n\n    init() {\n        fetch('../cars.json')\n            .then(response => response.json())\n            .then(data => {\n                this.setState({cars: data})\n        }).then(() => {\n            this.bindEvents();\n        })\n    }\n\n    bindEvents() {\n        //$(document).on('click', '.ad-btn', this.handleAdopt);\n    }\n\n    markAdopted = async () => {\n        const { accounts, contract } = this.state;\n\n        // Get the value from the contract to prove it worked.\n        const adopters = await contract.getAdopters();\n\n        for (let i = 0; i < adopters.length; i++) {\n            if (adopters[i] !== '0x0000000000000000000000000000000000000000') {\n                //$('#carTemplate').eq(i).find('button').text('Success').attr('disabled', true);\n            }\n        }\n    }\n\n    handleAdopt = async (event) => {\n        event.preventDefault();\n\n        const { accounts, contract } = this.state;\n\n        var carId = parseInt(event.target.data('id'));\n\n        // Stores a given value, 5 by default.\n        await contract.adopt(carId, { from: accounts[0] })\n    }\n\n    render() {\n        return (\n            <div>\n                <div class=\"row\">\n                    <div class=\"col-xs-12 col-sm-8 col-sm-push-2\">\n                        <h1 class=\"text-center\">Car Rental</h1>\n                        <hr/>\n                        <br/>\n                    </div>\n                </div>\n\n                <div class=\"row\">\n                </div>\n\n                <div className=\"row\">\n                    {this.state.cars.map(car =>\n                        <div className=\"col-md-4\">\n                            <form>\n                                <div className=\"card rounded\">\n                                    <div className=\"card-image\">\n                                        <span className=\"card-notify-badge\">{car.campaign}</span>\n                                        <span className=\"card-notify-year\">{car.year}</span>\n                                        <img className=\"img-fluid\" src={car.picture} alt={car.name}/>\n                                    </div>\n                                    <div className=\"card-image-overlay m-auto\">\n                                        <span className=\"card-detail-badge\">{car.seats}</span>\n                                        <span className=\"card-detail-badge\">{car.price}</span>\n                                        <span className=\"card-detail-badge\">{car.transmission}</span>\n                                    </div>\n                                    <div className=\"card-body text-center\">\n                                        <div className=\"ad-title m-auto\">\n                                            <h5>{car.name}</h5>\n                                        </div>\n                                        <button className=\"ad-btn\" type=\"button\" data-id={car.id} onClick={this.handleAdopt}>Book</button>\n                                    </div>\n                                </div>\n                            </form>\n                        </div>\n                    )}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default cars;","import React, { Component } from 'react';\nimport Cars from \"./components/cars\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"container\">\n        <Cars />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}